stages:
  - Create Credentials
  - Update Variables
  - Distribute Variables
  - Poetry Build
  - Run
  - Revoke Credentials

variables:
  POETRY_VERSION: '1.1.6'
  PYTHON_VERSION: '3.9'

Create New Keypair:
  stage: Create Credentials
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    # otherwise you need less installed: https://github.com/aws/aws-cli/issues/5343
    AWS_PAGER: ''
  script:
    - |
      echo "Extracting Existing Key"
      echo ${AWS_ACCESS_KEY_ID} > ${CI_PROJECT_DIR}/to-revoke
    - |
      echo "Creating Access Key"
      IAM_CREDENTIALS=`aws iam create-access-key --query 'AccessKey.[AccessKeyId,SecretAccessKey]' --output text`
    - |
      echo "Updating Access Key"
      ACCESS_KEY_ID=$(echo ${IAM_CREDENTIALS} | awk '{ print $1 }')
      curl -f -X PUT -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/AWS_ACCESS_KEY_ID" --data "value=$ACCESS_KEY_ID" >/dev/null
      SECRET_ACCESS_KEY=$(echo ${IAM_CREDENTIALS} | awk '{ print $2 }')
      curl -f -X PUT -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/AWS_SECRET_ACCESS_KEY" --data "value=$SECRET_ACCESS_KEY" >/dev/null
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/to-revoke

Update ECR Docker Config:
  stage: Update Variables
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    # otherwise you need less installed: https://github.com/aws/aws-cli/issues/5343
    AWS_PAGER: ''
  script:
    - |
      echo "Validating Environment"
      [ -z "$GITLAB_API_TOKEN" ] && echo "Missing GITLAB_API_TOKEN Variable" && exit 1
    - |
      echo "Refreshing ECR Docker Login"
      ECR_RESULT=`aws ecr get-authorization-token --query 'authorizationData[*]'`
    - |
      echo "Building Gitlab Variable Request"
      GITLAB_VARIABLE_JSON=`echo $ECR_RESULT | jq -r 'reduce .[] as $i ({}; .[$i.proxyEndpoint] = {"auth": $i.authorizationToken}) | {"auths": .}'`
      # variable isn't specified, we need to create a new one
      if [ -z "$DOCKER_AUTH_CONFIG" ]; then
        echo "Adding DOCKER_AUTH_CONFIG Pipeline Variable"
        curl -f -X POST -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables" --data 'key=DOCKER_AUTH_CONFIG' --data "value=$GITLAB_VARIABLE_JSON" >/dev/null
      else
        echo "Updating DOCKER_AUTH_CONFIG Pipeline Variable"
        curl -f -X PUT -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/DOCKER_AUTH_CONFIG" --data "value=$GITLAB_VARIABLE_JSON" >/dev/null
      fi
    - |
      echo "Successfully Updated ECR Docker Login"

.poetry_image:
  image: python:$PYTHON_VERSION
  before_script:
    - echo "Fetching & Installing Poetry"
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - $([ ! -z $POETRY_VERSION ] && echo "--version $POETRY_VERSION")
    - echo "Configuring Current Shell"
    - source $HOME/.poetry/env

Build with Poetry:
  stage: Poetry Build
  extends:
    - .poetry_image
  script:
    - echo "Building Project"
    - poetry build
    - echo "Extracting Version"
    - poetry version -s > ./version
  artifacts:
    paths:
      - dist/*
      - ./version

Install & Run:
  stage: Run
  image: python:$PYTHON_VERSION
  script:
    - |
      echo "Installing Project"
      pip install dist/*.whl
    - |
      echo "Executing Project"
      var-sync --projects ./projects.yml --api-url ${CI_SERVER_URL} --api-token ${GITLAB_API_TOKEN}

Revoke Old Keypair:
  stage: Revoke Credentials
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  variables:
    # otherwise you need less installed: https://github.com/aws/aws-cli/issues/5343
    AWS_PAGER: ''
  script:
    - |
      echo "Revoking Access Key"
      aws iam delete-access-key --access-key-id $(cat ${CI_PROJECT_DIR}/to-revoke)
